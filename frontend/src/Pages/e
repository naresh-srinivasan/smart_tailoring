// import React, { useState, useEffect } from "react";
// import { motion } from "framer-motion";
// import measurementsData from "../data/Booking.json";
// import materialCosts from "../data/Material.json";
// import { calculateMaterialNeeded } from "./MaterialsCalculation";

// export default function BookNow() {
//   const [step, setStep] = useState(1);
//   const [gender, setGender] = useState("");
//   const [dressType, setDressType] = useState("");
//   const [formData, setFormData] = useState({});
//   const [showInstructions, setShowInstructions] = useState({});
//   const [totalCost, setTotalCost] = useState(0);
//   const [material, setMaterial] = useState("");
//   const [color, setColor] = useState("");
//   const [materialNeeded, setMaterialNeeded] = useState(0);
//   const [inventory, setInventory] = useState([]);
//   const [collarType, setCollarType] = useState("");
//   const [sleeveType, setSleeveType] = useState("");
//   const [measurementUnit, setMeasurementUnit] = useState("cm");
//   const [userProfile, setUserProfile] = useState({});
//   const [useProfileAddress, setUseProfileAddress] = useState(false);
//   const [deliveryAddress, setDeliveryAddress] = useState("");
//   const [expectedDate, setExpectedDate] = useState("");
//   const [showCollarInfo, setShowCollarInfo] = useState(false);
//   const [showSleeveInfo, setShowSleeveInfo] = useState(false);
//   const [orderCompleted, setOrderCompleted] = useState(false);
//   const [submittedOrder, setSubmittedOrder] = useState(null);
//   const [showConfetti, setShowConfetti] = useState(false);
//   const [isSubmitting, setIsSubmitting] = useState(false);
//   const [promoCode, setPromoCode] = useState("");
//   const [discount, setDiscount] = useState(0);
//   const [promoError, setPromoError] = useState("");


//   const DELIVERY_CHARGE = 50;
//   const LABOUR_CHARGE = 100;
//   const API_BASE = "http://localhost:5000/api";

//   // Redirect if not logged in & fetch profile
//   useEffect(() => {
//     const token = localStorage.getItem("token");
//     if (!token) {
//       window.location.href = "/login";
//     } else {
//       fetch(`${API_BASE}/user/profile`, {
//         headers: { Authorization: `Bearer ${token}` },
//       })
//         .then((res) => res.json())
//         .then((data) => setUserProfile(data))
//         .catch(console.error);
//     }
//   }, []);

//   // Fetch inventory
//   useEffect(() => {
//     const fetchInventory = async () => {
//       try {
//         const res = await fetch(`${API_BASE}/inventory`);
//         const data = await res.json();
//         setInventory(data.items || []);
//       } catch (err) {
//         console.error("Failed to fetch inventory:", err);
//         setInventory([]);
//       }
//     };
//     fetchInventory();
//   }, []);

//   // Step handlers
//   const handleGenderSelect = (g) => {
//     setGender(g);
//     setStep(2);
//   };

//   const handleDressTypeSelect = (type) => {
//     setDressType(type);
//     const initialData = {};
//     const measurements = measurementsData[gender]?.[type]?.measurements;
//     if (!measurements) {
//       alert("No measurements found for this dress type!");
//       return;
//     }
//     measurements.forEach((m) => (initialData[m.name] = ""));
//     setFormData(initialData);
//     setTotalCost(measurementsData[gender][type]?.baseCost || 0);
//     setMaterialNeeded(0);
//     setStep(3);
//   };

//   // Calculate material needed
//   useEffect(() => {
//     if (dressType && formData && Object.keys(formData).length > 0) {
//       try {
//         let needed = calculateMaterialNeeded(dressType, formData, measurementUnit);
//         setMaterialNeeded(parseFloat(needed) || 0);
//       } catch (error) {
//         console.error("Error calculating material needed:", error);
//         setMaterialNeeded(0);
//       }
//     }
//   }, [formData, dressType, measurementUnit]);

//   const applyPromoCode = async () => {
//   if (!promoCode.trim()) return;

//   const token = localStorage.getItem("token");

//   try {
//     const res = await fetch(`${API_BASE}/orders/validate`, {
//       method: "POST",
//       headers: {
//         "Content-Type": "application/json",
//         Authorization: `Bearer ${token}`,
//       },
//       body: JSON.stringify({ code: promoCode.trim() }),
//     });

//     const data = await res.json();

//     if (!res.ok || !data.valid) {
//       setPromoError(data.message || "Invalid promo code");
//       setDiscount(0);
//       return;
//     }

//     // Valid promo
//     setDiscount(data.discountPercentage || 0);
//     setPromoError("");

//     // Update total cost with discount
//     setTotalCost(prev => prev - prev * (data.discountPercentage / 100));

//     console.log(`Promo applied: ${data.discountPercentage}% off`);
//   } catch (err) {
//     console.error("Promo code error:", err);
//     setPromoError(err.message || "Invalid promo code");
//     setDiscount(0);
//   }
// };

// const removePromoCode = () => {
//   // Reset discount
//   setDiscount(0);
//   setPromoError("");
  
//   // Reset total cost (recalculate without discount)
//   const baseCost = measurementsData[gender]?.[dressType]?.baseCost || 0;
//   const materialCost = material && materialCosts[material] ? (materialCosts[material] * materialNeeded) : 0;
//   const extrasCost = measurementsData[gender]?.[dressType]?.extras?.filter(ex => ex.selected).reduce((sum, ex) => sum + ex.cost, 0) || 0;
//   setTotalCost(baseCost + materialCost + LABOUR_CHARGE + DELIVERY_CHARGE + extrasCost);

//   // Allow editing promo input again
//   setPromoCode("");
// };

//   // Calculate total cost
//   useEffect(() => {
//     if (!dressType || !gender) return;

//     const base = measurementsData[gender]?.[dressType]?.baseCost || 0;
//     const extrasSum = measurementsData[gender]?.[dressType]?.extras
//       ?.filter((ex) => ex.selected)
//       .reduce((sum, ex) => sum + ex.cost, 0) || 0;
//     const materialPrice =
//       material && materialCosts[material]
//         ? parseFloat(materialCosts[material]) * parseFloat(materialNeeded)
//         : 0;

//     setTotalCost(base + extrasSum + materialPrice + DELIVERY_CHARGE + LABOUR_CHARGE);
//   }, [materialNeeded, material, dressType, gender, formData]);

//   const handleInputChange = (e) => {
//     setFormData({ ...formData, [e.target.name]: e.target.value });
//   };

//   const toggleInstruction = (name) => {
//     setShowInstructions((prev) => ({ ...prev, [name]: !prev[name] }));
//   };

//   const handleExtraChange = (index) => {
//     if (!measurementsData[gender]?.[dressType]?.extras) return;

//     const updatedExtras = [...measurementsData[gender][dressType].extras];
//     updatedExtras[index].selected = !updatedExtras[index].selected;
//     measurementsData[gender][dressType].extras = updatedExtras;
//     setFormData({ ...formData }); // Trigger re-render
//   };

//   const proceedToSummary = (e) => {
//     e.preventDefault();

//     // Validate required fields
//     if (!material || !color) {
//       alert("Please select both material and color");
//       return;
//     }

//     if (dressType === "Shirt" && (!collarType || !sleeveType)) {
//       alert("Please select collar type and sleeve type for shirts");
//       return;
//     }

//     // Check if all measurements are filled
//     const measurements = measurementsData[gender]?.[dressType]?.measurements || [];
//     const missingMeasurements = measurements.filter(m => !formData[m.name] || formData[m.name].trim() === "");

//     if (missingMeasurements.length > 0) {
//       alert(`Please fill in all measurements: ${missingMeasurements.map(m => m.name).join(", ")}`);
//       return;
//     }

//     setStep(4);
//   };

//   const handleFinalSubmit = async () => {
//     if (isSubmitting) return; // Prevent double submission

//     try {
//       setIsSubmitting(true);

//       // Validate delivery details
//       if (!deliveryAddress.trim()) {
//         alert("Please enter delivery address");
//         return;
//       }

//       if (!expectedDate) {
//         alert("Please select expected delivery date");
//         return;
//       }

//       const token = localStorage.getItem("token");
//       if (!token) {
//         alert("Please log in to place an order");
//         return;
//       }

//       // Find inventory item
//       const inventoryItem = inventory.find(item => {
//         const itemMaterial = String(item.material_name || '').trim().toLowerCase();
//         const itemColor = String(item.color || '').trim().toLowerCase();
//         const searchMaterial = String(material || '').trim().toLowerCase();
//         const searchColor = String(color || '').trim().toLowerCase();
//         return itemMaterial === searchMaterial && itemColor === searchColor;
//       });

//       if (!inventoryItem) {
//         alert("Selected material and color combination is not available in inventory");
//         return;
//       }

//       if (materialNeeded > inventoryItem.total_quantity) {
//         alert(`Not enough material in stock! Required: ${materialNeeded}m, Available: ${inventoryItem.total_quantity}m`);
//         return;
//       }

//       // Prepare order data
//       const extrasSelected = measurementsData[gender]?.[dressType]?.extras
//         ?.filter((ex) => ex.selected)
//         .map((ex) => ex.name) || [];

//       const orderData = {
//         gender,
//         dress_type: dressType,
//         measurements: {
//           ...formData,
//           collar_type: dressType === "Shirt" ? collarType : undefined,
//           sleeve_type: dressType === "Shirt" ? sleeveType : undefined,
//           unit: measurementUnit
//         },
//         material,
//         color,
//         material_needed: materialNeeded,
//         extras: extrasSelected,
//         delivery_address: deliveryAddress,
//         expected_date: expectedDate,
//         delivery_charge: DELIVERY_CHARGE,
//         promo_code: promoCode || null,
//         discount_percentage: discount || 0,
//         totalAmount: totalCost, // already updated with discount if applied
//       };

//       // Submit order
//       const response = await fetch(`${API_BASE}/orders`, {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Authorization: `Bearer ${token}`,
//         },
//         body: JSON.stringify(orderData),
//       });

//       if (!response.ok) {
//         const errorData = await response.json().catch(() => ({}));
//         throw new Error(errorData.message || "Failed to submit order");
//       }

//       const data = await response.json();
//       console.log("Order submitted successfully:", data);

//       // Update inventory
//       const inventoryUpdateResponse = await fetch(`${API_BASE}/inventory/${inventoryItem.id}`, {
//         method: "PATCH",
//         headers: {
//           "Content-Type": "application/json",
//           Authorization: `Bearer ${token}`
//         },
//         body: JSON.stringify({
//           total_quantity: parseFloat(inventoryItem.total_quantity) - parseFloat(materialNeeded),
//         }),
//       });

//       if (!inventoryUpdateResponse.ok) {
//         console.error("Failed to update inventory, but order was placed successfully");
//       }

//       // Set order completion state
//       setSubmittedOrder(orderData);
//       setOrderCompleted(true);
//       setShowConfetti(true);

//       // Stop confetti after 5 seconds
//       setTimeout(() => setShowConfetti(false), 5000);

//       // Refresh inventory
//       try {
//         const updatedInventory = await fetch(`${API_BASE}/inventory`);
//         const invData = await updatedInventory.json();
//         setInventory(invData.items || []);
//       } catch (err) {
//         console.error("Failed to refresh inventory:", err);
//       }

//     } catch (err) {
//       console.error("Order submission error:", err);
//       alert(err.message || "Failed to submit order. Please try again.");
//     } finally {
//       setIsSubmitting(false);
//     }
//   };

//   // Reset form to initial state
//   const resetForm = () => {
//     setStep(1);
//     setGender("");
//     setDressType("");
//     setFormData({});
//     setShowInstructions({});
//     setMaterial("");
//     setColor("");
//     setCollarType("");
//     setSleeveType("");
//     setMeasurementUnit("cm");
//     setMaterialNeeded(0);
//     setTotalCost(0);
//     setDeliveryAddress("");
//     setExpectedDate("");
//     setUseProfileAddress(false);
//     setShowCollarInfo(false);
//     setShowSleeveInfo(false);
//     setOrderCompleted(false);
//     setSubmittedOrder(null);
//     setShowConfetti(false);
//     setIsSubmitting(false);
//   };

//   const stepTitles = ["Gender", "Dress Type", "Measurements", "Summary"];

//   // Don't render anything while order completion modal is showing
//   if (orderCompleted && submittedOrder) {
//     return (
//       <div className="min-h-screen bg-gray-50 py-10 px-6">
//         {showConfetti && (
//           <div className="fixed inset-0 pointer-events-none z-50">
//             {/* Simple confetti effect - you might want to use a proper confetti library */}
//             <div className="animate-pulse text-6xl text-center pt-20">🎉</div>
//           </div>
//         )}

//         <motion.div
//           className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-40"
//           initial={{ opacity: 0 }}
//           animate={{ opacity: 1 }}
//           transition={{ duration: 0.4 }}
//         >
//           <motion.div
//             className="bg-white rounded-3xl p-10 max-w-lg w-full shadow-2xl text-center mx-4"
//             initial={{ scale: 0.7, opacity: 0 }}
//             animate={{ scale: 1, opacity: 1 }}
//             transition={{ type: "spring", stiffness: 120, damping: 15 }}
//           >
//             <h2 className="text-3xl font-bold text-green-600 mb-4">🎉 Order Completed! 🎉</h2>
//             <p className="mb-4 text-gray-700">Thank you! Your order has been successfully placed.</p>

//             <div className="text-left bg-gray-50 p-4 rounded-lg mb-4">
//               <h3 className="font-semibold text-lg mb-3 text-center">Order Summary:</h3>
//               <div className="space-y-2">
//                 <p><strong>Dress Type:</strong> {submittedOrder.dress_type}</p>
//                 <p><strong>Material:</strong> {submittedOrder.material}</p>
//                 <p><strong>Color:</strong> {submittedOrder.color}</p>
//                 <p><strong>Material Needed:</strong> {submittedOrder.material_needed}m</p>
//                 {submittedOrder.extras && submittedOrder.extras.length > 0 && (
//                   <p><strong>Extras:</strong> {submittedOrder.extras.join(", ")}</p>
//                 )}
//                 <p className="text-lg font-bold text-blue-600">
//                   <strong>Total Amount:</strong> ₹{submittedOrder.totalAmount}
//                 </p>
//               </div>
//             </div>

//             <div className="flex gap-3 justify-center">
//               <button
//                 onClick={resetForm}
//                 className="px-6 py-3 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition"
//               >
//                 Place New Order
//               </button>
//               <button
//                 onClick={() => window.location.href = "/orders"}
//                 className="px-6 py-3 bg-gray-600 text-white rounded-lg font-semibold hover:bg-gray-700 transition"
//               >
//                 View Orders
//               </button>
//             </div>
//           </motion.div>
//         </motion.div>
//       </div>
//     );
//   }

//   return (
//     <div className="min-h-screen bg-gray-50 py-10 px-6">
//       <motion.div
//         className="max-w-5xl mx-auto bg-white rounded-3xl p-10 shadow-2xl"
//         initial={{ opacity: 0, y: 20 }}
//         animate={{ opacity: 1, y: 0 }}
//       >
//         <h1 className="text-4xl font-bold text-center text-blue-600 mb-8">Book Now</h1>

//         {/* Step Indicator */}
//         <div className="flex justify-center items-center gap-4 mb-10 flex-wrap">
//           {stepTitles.map((title, index) => (
//             <div key={title} className="flex items-center gap-2">
//               <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-semibold ${step >= index + 1 ? "bg-blue-600" : "bg-gray-300 text-gray-600"}`}>
//                 {index + 1}
//               </div>
//               <span className={`hidden md:block font-medium ${step >= index + 1 ? "text-blue-600" : "text-gray-500"}`}>
//                 {title}
//               </span>
//               {index < stepTitles.length - 1 && (
//                 <div className={`w-8 h-1 ${step > index + 1 ? "bg-blue-600" : "bg-gray-300"}`}></div>
//               )}
//             </div>
//           ))}
//         </div>

//         {/* Step 1: Gender */}
//         {step === 1 && (
//           <div className="flex flex-col items-center gap-8">
//             <p className="text-lg text-gray-700 font-medium">Select your gender:</p>
//             <div className="flex gap-8 flex-wrap justify-center">
//               {["Men", "Women"].map((g) => (
//                 <button
//                   key={g}
//                   onClick={() => handleGenderSelect(g)}
//                   className="px-10 py-4 bg-blue-600 text-white rounded-xl font-semibold shadow-md hover:bg-blue-700 transition transform hover:scale-105"
//                 >
//                   {g}
//                 </button>
//               ))}
//             </div>
//           </div>
//         )}

//         {/* Step 2: Dress Type */}
//         {step === 2 && (
//           <div className="flex flex-col items-center gap-6">
//             <p className="text-lg text-gray-700 font-medium">Select {gender} dress type:</p>
//             <div className="flex gap-6 flex-wrap justify-center">
//               {Object.keys(measurementsData[gender] || {}).map((type) => (
//                 <button
//                   key={type}
//                   onClick={() => handleDressTypeSelect(type)}
//                   className="px-8 py-3 bg-yellow-500 text-white rounded-lg shadow hover:bg-yellow-600 transition font-medium transform hover:scale-105"
//                 >
//                   {type}
//                 </button>
//               ))}
//             </div>
//             <button
//               onClick={() => setStep(1)}
//               className="mt-6 px-4 py-2 bg-gray-300 rounded-full hover:bg-gray-400 transition text-lg font-bold flex items-center gap-2"
//             >
//               ← Back
//             </button>
//           </div>
//         )}

//         {/* Step 3: Measurements & Details */}
//         {step === 3 && (
//           <form onSubmit={proceedToSummary} className="grid grid-cols-1 md:grid-cols-2 gap-6">
//             {/* Measurement Unit Selector */}
//             <div className="md:col-span-2 flex flex-col gap-2">
//               <label className="text-gray-700 font-medium">Measurement Unit</label>
//               <select
//                 value={measurementUnit}
//                 onChange={(e) => setMeasurementUnit(e.target.value)}
//                 className="w-full border border-gray-300 rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-400 transition"
//               >
//                 <option value="cm">Centimeters (cm)</option>
//                 <option value="inches">Inches (in)</option>
//               </select>
//             </div>

//             {/* Material */}
//             <div className="md:col-span-2 flex flex-col gap-2">
//               <label className="text-gray-700 font-medium">Material</label>
//               <select
//                 value={material}
//                 onChange={(e) => setMaterial(e.target.value)}
//                 className="w-full border border-gray-300 rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-400 transition"
//                 required
//               >
//                 <option value="">Select Material</option>
//                 {measurementsData[gender]?.[dressType]?.materials?.map((mat) => (
//                   <option key={mat} value={mat}>{mat}</option>
//                 ))}
//               </select>
//             </div>

//             {/* Color */}
//             <div className="md:col-span-2 flex flex-col gap-2">
//               <label className="text-gray-700 font-medium">Color</label>
//               <select
//                 value={color}
//                 onChange={(e) => setColor(e.target.value)}
//                 className="w-full border border-gray-300 rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-400 transition"
//                 required
//               >
//                 <option value="">Select Color</option>
//                 {measurementsData[gender]?.[dressType]?.colors?.map((col) => (
//                   <option key={col} value={col}>{col}</option>
//                 ))}
//               </select>
//             </div>

//             {/* Collar Type for Shirts */}
//             {dressType === "Shirt" && (
//               <>
//                 <div className="md:col-span-2 flex flex-col gap-2 relative">
//                   <label className="text-gray-700 font-medium">Collar Type</label>
//                   <div className="flex items-center gap-2">
//                     <select
//                       value={collarType}
//                       onChange={(e) => setCollarType(e.target.value)}
//                       className="flex-1 border border-gray-300 rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-400 transition"
//                       required
//                     >
//                       <option value="">Select Collar Type</option>
//                       <option value="Regular">Regular</option>
//                       <option value="Mandarin">Mandarin</option>
//                       <option value="Button-Down">Button-Down</option>
//                       <option value="Spread">Spread</option>
//                       <option value="Cutaway">Cutaway</option>
//                     </select>
//                     <button
//                       type="button"
//                       onClick={() => setShowCollarInfo(!showCollarInfo)}
//                       className="px-3 py-1 bg-blue-500 text-white rounded-md hover:bg-blue-600"
//                     >
//                       i
//                     </button>
//                   </div>

//                   {showCollarInfo && (
//                     <div className="mt-3 p-3 bg-gray-50 border rounded-lg shadow-inner">
//                       <h3 className="font-semibold mb-2 text-gray-700">Collar Types</h3>
//                       <div className="grid grid-cols-2 sm:grid-cols-3 gap-4">
//                         {[
//                           { label: "Regular", desc: "Standard shirt collar" },
//                           { label: "Mandarin", desc: "Stand-up collar without fold" },
//                           { label: "Button-Down", desc: "Collar with buttons" },
//                           { label: "Spread", desc: "Wide collar opening" },
//                           { label: "Cutaway", desc: "Very wide collar opening" },
//                         ].map((c) => (
//                           <div
//                             key={c.label}
//                             className={`p-3 border rounded-lg cursor-pointer transition-colors ${collarType === c.label ? "bg-blue-100 border-blue-500" : "hover:bg-gray-100"}`}
//                             onClick={() => setCollarType(c.label)}
//                           >
//                             <div className="font-medium">{c.label}</div>
//                             <div className="text-sm text-gray-600">{c.desc}</div>
//                           </div>
//                         ))}
//                       </div>
//                     </div>
//                   )}
//                 </div>

//                 {/* Sleeve Type */}
//                 <div className="md:col-span-2 flex flex-col gap-2 relative">
//                   <label className="text-gray-700 font-medium">Sleeve Type</label>
//                   <div className="flex items-center gap-2">
//                     <select
//                       value={sleeveType}
//                       onChange={(e) => setSleeveType(e.target.value)}
//                       className="flex-1 border border-gray-300 rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-400 transition"
//                       required
//                     >
//                       <option value="">Select Sleeve Type</option>
//                       <option value="Half Sleeve">Half Sleeve</option>
//                       <option value="Full Sleeve">Full Sleeve</option>
//                     </select>
//                     <button
//                       type="button"
//                       onClick={() => setShowSleeveInfo(!showSleeveInfo)}
//                       className="px-3 py-1 bg-blue-500 text-white rounded-md hover:bg-blue-600"
//                     >
//                       i
//                     </button>
//                   </div>

//                   {showSleeveInfo && (
//                     <div className="mt-3 p-3 bg-gray-50 border rounded-lg shadow-inner">
//                       <h3 className="font-semibold mb-2 text-gray-700">Sleeve Types</h3>
//                       <div className="grid grid-cols-2 gap-4">
//                         {[
//                           { label: "Half Sleeve", desc: "Short sleeves ending at mid-arm" },
//                           { label: "Full Sleeve", desc: "Long sleeves ending at wrists" },
//                         ].map((s) => (
//                           <div
//                             key={s.label}
//                             className={`p-3 border rounded-lg cursor-pointer transition-colors ${sleeveType === s.label ? "bg-blue-100 border-blue-500" : "hover:bg-gray-100"}`}
//                             onClick={() => setSleeveType(s.label)}
//                           >
//                             <div className="font-medium">{s.label}</div>
//                             <div className="text-sm text-gray-600">{s.desc}</div>
//                           </div>
//                         ))}
//                       </div>
//                     </div>
//                   )}
//                 </div>
//               </>
//             )}

//             {/* Measurements */}
//             {measurementsData[gender]?.[dressType]?.measurements?.map((m) => (
//               <div key={m.name} className="flex flex-col gap-2 relative">
//                 <label className="text-gray-700 font-medium">{m.name}</label>
//                 <input
//                   type="number"
//                   name={m.name}
//                   value={formData[m.name] || ""}
//                   onChange={handleInputChange}
//                   placeholder={`${m.placeholder} (${measurementUnit})`}
//                   className="w-full border border-gray-300 rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-400 transition"
//                   step="0.1"
//                   min="0"
//                   required
//                 />
//                 <button
//                   type="button"
//                   onClick={() => toggleInstruction(m.name)}
//                   className="absolute right-3 top-9 text-blue-500 font-bold hover:text-blue-700"
//                 >
//                   i
//                 </button>
//                 {showInstructions[m.name] && (
//                   <p className="text-sm text-gray-600 mt-1 bg-gray-50 p-2 rounded-md shadow-inner">
//                     {m.instruction}
//                   </p>
//                 )}
//               </div>
//             ))}

//             {/* Material Needed Display */}
//             {materialNeeded > 0 && (
//               <div className="md:col-span-2 mt-2 p-3 bg-gray-100 rounded-lg text-gray-700 font-medium">
//                 Material Needed: <span className="font-bold text-blue-600">{materialNeeded}m</span>
//               </div>
//             )}

//             {/* Extras */}
//             {measurementsData[gender]?.[dressType]?.extras?.length > 0 && (
//               <div className="md:col-span-2 mt-4">
//                 <h2 className="text-xl font-semibold mb-2">Extras:</h2>
//                 <div className="flex flex-wrap gap-4">
//                   {measurementsData[gender][dressType].extras.map((ex, idx) => (
//                     <label
//                       key={ex.name}
//                       className="flex items-center gap-2 border px-3 py-2 rounded-lg cursor-pointer hover:bg-gray-100 transition"
//                     >
//                       <input
//                         type="checkbox"
//                         checked={!!ex.selected}
//                         onChange={() => handleExtraChange(idx)}
//                         className="w-4 h-4"
//                       />
//                       <span>{ex.name} (+₹{ex.cost})</span>
//                     </label>
//                   ))}
//                 </div>
//               </div>
//             )}

//             {/* Bill Summary */}
//             <div className="md:col-span-2 mt-4 p-4 border rounded-lg bg-gray-50">
//               <h2 className="text-lg font-semibold mb-2">Bill Breakdown:</h2>
//               <div className="space-y-1 text-gray-700">
//                 <div className="flex justify-between">
//                   <span>Base Cost:</span>
//                   <span>₹{measurementsData[gender]?.[dressType]?.baseCost || 0}</span>
//                 </div>
//                 <div className="flex justify-between">
//                   <span>Material Cost:</span>
//                   <span>₹{material && materialCosts[material] ? (materialCosts[material] * materialNeeded).toFixed(2) : 0}</span>
//                 </div>
//                 <div className="flex justify-between">
//                   <span>Labour Charge:</span>
//                   <span>₹{LABOUR_CHARGE}</span>
//                 </div>
//                 <div className="flex justify-between">
//                   <span>Delivery Charge:</span>
//                   <span>₹{DELIVERY_CHARGE}</span>
//                 </div>
//                 {measurementsData[gender]?.[dressType]?.extras?.filter((ex) => ex.selected).map((ex) => (
//                   <div key={ex.name} className="flex justify-between text-sm">
//                     <span>{ex.name}:</span>
//                     <span>₹{ex.cost}</span>
//                   </div>
//                 ))}
//                 <hr className="my-2" />
//                 <div className="flex justify-between font-bold text-lg text-blue-600">
//                   <span>Total:</span>
//                   <span>₹{totalCost}</span>
//                 </div>
//               </div>
//             </div>

//             <div className="md:col-span-2 flex justify-between mt-6">
//               <button
//                 type="button"
//                 onClick={() => setStep(2)}
//                 className="px-4 py-2 bg-gray-300 rounded-full hover:bg-gray-400 transition text-lg font-bold flex items-center gap-2"
//               >
//                 ← Back
//               </button>
//               <button
//                 type="submit"
//                 className="px-6 py-3 bg-gradient-to-r from-blue-600 to-yellow-500 text-white rounded-lg shadow-lg hover:from-blue-700 hover:to-yellow-600 transition font-medium"
//               >
//                 Proceed to Summary
//               </button>
//             </div>
//           </form>
//         )}

//         {/* Step 4: Order Summary & Delivery */}
//         {step === 4 && (
//   <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
//     {/* Order Summary */}
//     <div className="md:col-span-2 p-4 border rounded-lg bg-gray-50">
//       <h2 className="text-xl font-semibold mb-4">Order Summary</h2>
//       <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
//         <div>
//           <p><strong>Gender:</strong> {gender}</p>
//           <p><strong>Dress Type:</strong> {dressType}</p>
//           <p><strong>Material:</strong> {material}</p>
//           <p><strong>Color:</strong> {color}</p>
//           <p><strong>Unit:</strong> {measurementUnit}</p>
//           <p><strong>Material Needed:</strong> {materialNeeded}m</p>
//           {dressType === "Shirt" && (
//             <>
//               <p><strong>Collar Type:</strong> {collarType}</p>
//               <p><strong>Sleeve Type:</strong> {sleeveType}</p>
//             </>
//           )}
//         </div>
//         <div>
//           <h3 className="font-semibold mb-2">Measurements:</h3>
//           <div className="text-sm space-y-1">
//             {Object.entries(formData).map(([key, value]) => (
//               <p key={key}>{key}: {value}{measurementUnit}</p>
//             ))}
//           </div>
//         </div>
//       </div>

//       {measurementsData[gender]?.[dressType]?.extras?.filter((ex) => ex.selected).length > 0 && (
//         <div className="mt-4">
//           <h3 className="font-semibold mb-2">Selected Extras:</h3>
//           <ul className="list-disc list-inside text-sm">
//             {measurementsData[gender][dressType].extras.filter((ex) => ex.selected).map((ex) => (
//               <li key={ex.name}>{ex.name} (+₹{ex.cost})</li>
//             ))}
//           </ul>
//         </div>
//       )}

//       {/* Promo Code */}
//       <div className="md:col-span-2 mt-4 p-4 border rounded-lg bg-gray-50">
//         <h2 className="text-xl font-semibold mb-2">Apply Promo Code</h2>
//         <div className="flex gap-2 items-center">
//           <input
//             type="text"
//             value={promoCode}
//             onChange={(e) => setPromoCode(e.target.value)}
//             placeholder="Enter promo code"
//             className="flex-1 border border-gray-300 rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-400 transition"
//             disabled={discount > 0} // freeze input if promo applied
//           />
//           <button
//             type="button"
//             onClick={discount > 0 ? removePromoCode : applyPromoCode} // toggle
//             className={`px-4 py-2 rounded-lg transition ${
//               discount > 0
//                 ? "bg-red-500 hover:bg-red-600 text-white"
//                 : "bg-blue-600 hover:bg-blue-700 text-white"
//             }`}
//           >
//             {discount > 0 ? "Remove" : "Apply"}
//           </button>
//         </div>
//         {promoError && <p className="text-red-500 mt-1">{promoError}</p>}
//         {discount > 0 && <p className="text-green-600 mt-1">Promo applied! You got {discount}% off</p>}
//       </div>

//       {/* Total Amount */}
//       <div className="mt-4 pt-4 border-t">
//         <p className="text-lg font-bold text-blue-600">Total Amount: ₹{totalCost}</p>
//       </div>
//     </div>

//     {/* Delivery Details */}
//     <div className="md:col-span-2 p-4 border rounded-lg bg-gray-50">
//       <h2 className="text-xl font-semibold mb-4">Delivery Details</h2>
//       <div className="space-y-4">
//         <label className="flex items-center gap-2">
//           <input
//             type="checkbox"
//             checked={useProfileAddress}
//             onChange={(e) => {
//               setUseProfileAddress(e.target.checked);
//               if (e.target.checked) {
//                 setDeliveryAddress(userProfile.address || "");
//               } else {
//                 setDeliveryAddress("");
//               }
//             }}
//           />
//           <span>Use address from profile</span>
//           {userProfile.address && <span className="text-sm text-gray-600">({userProfile.address.substring(0, 50)}{userProfile.address.length > 50 ? '...' : ''})</span>}
//         </label>

//         <div className="flex flex-col gap-2">
//           <label className="text-gray-700 font-medium">
//             {useProfileAddress ? "Profile Address" : "Delivery Address"}
//           </label>
//           <textarea
//             value={deliveryAddress}
//             onChange={(e) => setDeliveryAddress(e.target.value)}
//             placeholder="Enter complete delivery address"
//             className="w-full border border-gray-300 rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-400 transition resize-none"
//             rows="3"
//             required
//             disabled={useProfileAddress}
//           />
//         </div>

//         <div className="flex flex-col gap-2">
//           <label className="text-gray-700 font-medium">Expected Delivery Date</label>
//           <input
//             type="date"
//             value={expectedDate}
//             onChange={(e) => setExpectedDate(e.target.value)}
//             className="w-full border border-gray-300 rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-blue-400 transition"
//             min={new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]} // Minimum 7 days from now
//             required
//           />
//           <p className="text-sm text-gray-600">
//             *Minimum delivery time is 7 days from today
//           </p>
//         </div>
//       </div>
//     </div>

//     <div className="md:col-span-2 flex justify-between mt-6">
//       <button
//         onClick={() => setStep(3)}
//         className="px-4 py-2 bg-gray-300 rounded-full hover:bg-gray-400 transition text-lg font-bold flex items-center gap-2"
//         disabled={isSubmitting}
//       >
//         ← Back
//       </button>
//       <button
//         onClick={handleFinalSubmit}
//         disabled={isSubmitting || !deliveryAddress.trim() || !expectedDate}
//         className="px-6 py-3 bg-gradient-to-r from-blue-600 to-yellow-500 text-white rounded-lg shadow-lg hover:from-blue-700 hover:to-yellow-600 transition font-medium disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
//       >
//         {isSubmitting ? (
//           <>
//             <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
//             Submitting...
//           </>
//         ) : (
//           "Submit Order"
//         )}
//       </button>
//     </div>
//   </div>
// )}
//       </motion.div >
//     </div >
//   );
// }